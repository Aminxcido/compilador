/*
 * generated by Xtext 2.38.0
 */
grammar InternalMathLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mathlang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mathlang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mathlang.services.MathLangGrammarAccess;

}

@parser::members {

 	private MathLangGrammarAccess grammarAccess;

    public InternalMathLangParser(TokenStream input, MathLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MathLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getExpressionsDelimitedExprParserRuleCall_0());
			}
			lv_expressions_0_0=ruleDelimitedExpr
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"expressions",
					lv_expressions_0_0,
					"org.xtext.example.mathlang.MathLang.DelimitedExpr");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDelimitedExpr
entryRuleDelimitedExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelimitedExprRule()); }
	iv_ruleDelimitedExpr=ruleDelimitedExpr
	{ $current=$iv_ruleDelimitedExpr.current; }
	EOF;

// Rule DelimitedExpr
ruleDelimitedExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='$'
		{
			newLeafNode(otherlv_0, grammarAccess.getDelimitedExprAccess().getDollarSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDelimitedExprAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.example.mathlang.MathLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='@'
		{
			newLeafNode(otherlv_2, grammarAccess.getDelimitedExprAccess().getCommercialAtKeyword_2());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0());
		}
		this_SimpleExpression_0=ruleSimpleExpression
		{
			$current = $this_SimpleExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_1());
		}
		this_Assignment_1=ruleAssignment
		{
			$current = $this_Assignment_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAssignmentAccess().getAssignmentAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getLeftVariableParserRuleCall_1_0());
				}
				lv_left_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.xtext.example.mathlang.MathLang.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.xtext.example.mathlang.MathLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_ruleSimpleExpression=ruleSimpleExpression
	{ $current=$iv_ruleSimpleExpression.current; }
	EOF;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAddSubParserRuleCall());
	}
	this_AddSub_0=ruleAddSub
	{
		$current = $this_AddSub_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddSub
entryRuleAddSub returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddSubRule()); }
	iv_ruleAddSub=ruleAddSub
	{ $current=$iv_ruleAddSub.current; }
	EOF;

// Rule AddSub
ruleAddSub returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddSubAccess().getMulDivParserRuleCall_0());
		}
		this_MulDiv_0=ruleMulDiv
		{
			$current = $this_MulDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAddSubAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAddSubAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAddSubAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAddSubAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddSubAccess().getRightMulDivParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMulDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddSubRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.example.mathlang.MathLang.MulDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulDiv
entryRuleMulDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulDivRule()); }
	iv_ruleMulDiv=ruleMulDiv
	{ $current=$iv_ruleMulDiv.current; }
	EOF;

// Rule MulDiv
ruleMulDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulDivAccess().getPowParserRuleCall_0());
		}
		this_Pow_0=rulePow
		{
			$current = $this_Pow_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulDivAccess().getDivLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulDivAccess().getRightPowParserRuleCall_1_1_0());
					}
					lv_right_5_0=rulePow
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulDivRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.xtext.example.mathlang.MathLang.Pow");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePow
entryRulePow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowRule()); }
	iv_rulePow=rulePow
	{ $current=$iv_rulePow.current; }
	EOF;

// Rule Pow
rulePow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowAccess().getUnaryParserRuleCall_0());
		}
		this_Unary_0=ruleUnary
		{
			$current = $this_Unary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPowAccess().getPowBaseAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getPowAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPowAccess().getExponentPowParserRuleCall_1_2_0());
					}
					lv_exponent_3_0=rulePow
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowRule());
						}
						set(
							$current,
							"exponent",
							lv_exponent_3_0,
							"org.xtext.example.mathlang.MathLang.Pow");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	iv_ruleUnary=ruleUnary
	{ $current=$iv_ruleUnary.current; }
	EOF;

// Rule Unary
ruleUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryAccess().getNegativeAction_0_0(),
						$current);
				}
			)
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getUnaryAccess().getHyphenMinusKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryAccess().getOperandUnaryParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.example.mathlang.MathLang.Unary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1());
		}
		this_Primary_3=rulePrimary
		{
			$current = $this_Primary_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getFunctionCallParserRuleCall_0());
		}
		this_FunctionCall_0=ruleFunctionCall
		{
			$current = $this_FunctionCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2());
		}
		this_NumberLiteral_2=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionCallAccess().getFunctionCallAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_func_1_1='sin'
					{
						newLeafNode(lv_func_1_1, grammarAccess.getFunctionCallAccess().getFuncSinKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_1, null);
					}
					    |
					lv_func_1_2='cos'
					{
						newLeafNode(lv_func_1_2, grammarAccess.getFunctionCallAccess().getFuncCosKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_2, null);
					}
					    |
					lv_func_1_3='tan'
					{
						newLeafNode(lv_func_1_3, grammarAccess.getFunctionCallAccess().getFuncTanKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_3, null);
					}
					    |
					lv_func_1_4='sqrt'
					{
						newLeafNode(lv_func_1_4, grammarAccess.getFunctionCallAccess().getFuncSqrtKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_4, null);
					}
					    |
					lv_func_1_5='log'
					{
						newLeafNode(lv_func_1_5, grammarAccess.getFunctionCallAccess().getFuncLogKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_5, null);
					}
					    |
					lv_func_1_6='ln'
					{
						newLeafNode(lv_func_1_6, grammarAccess.getFunctionCallAccess().getFuncLnKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_6, null);
					}
					    |
					lv_func_1_7='frac'
					{
						newLeafNode(lv_func_1_7, grammarAccess.getFunctionCallAccess().getFuncFracKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionCallRule());
						}
						setWithLastConsumed($current, "func", lv_func_1_7, null);
					}
				)
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0());
					}
					lv_args_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"org.xtext.example.mathlang.MathLang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0());
						}
						lv_args_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"args",
								lv_args_5_0,
								"org.xtext.example.mathlang.MathLang.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
