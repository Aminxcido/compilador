/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mathlang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsDelimitedExprParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//    expressions+=DelimitedExpr*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=DelimitedExpr*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//DelimitedExpr
		public RuleCall getExpressionsDelimitedExprParserRuleCall_0() { return cExpressionsDelimitedExprParserRuleCall_0; }
	}
	public class DelimitedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.DelimitedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DelimitedExpr:
		//    '$' expr=Expression '@';
		@Override public ParserRule getRule() { return rule; }
		
		//'$' expr=Expression '@'
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression returns Expression:
		//    SimpleExpression | Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExpression | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftVariableParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Assignment returns Expression:
		//    {Assignment}
		//    left=Variable '=' right=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment}
		//left=Variable '=' right=Expression
		public Group getGroup() { return cGroup; }
		
		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }
		
		//left=Variable
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Variable
		public RuleCall getLeftVariableParserRuleCall_1_0() { return cLeftVariableParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.SimpleExpression");
		private final RuleCall cAddSubParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleExpression returns Expression:
		//    AddSub;
		@Override public ParserRule getRule() { return rule; }
		
		//AddSub
		public RuleCall getAddSubParserRuleCall() { return cAddSubParserRuleCall; }
	}
	public class AddSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.AddSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddSub returns Expression:
		//    MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulDiv
		public RuleCall getMulDivParserRuleCall_0() { return cMulDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulDiv
		public RuleCall getRightMulDivParserRuleCall_1_1_0() { return cRightMulDivParserRuleCall_1_1_0; }
	}
	public class MulDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.MulDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPowParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulDiv returns Expression:
		//    Pow (({Mul.left=current} '*' | {Div.left=current} '/') right=Pow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Pow (({Mul.left=current} '*' | {Div.left=current} '/') right=Pow)*
		public Group getGroup() { return cGroup; }
		
		//Pow
		public RuleCall getPowParserRuleCall_0() { return cPowParserRuleCall_0; }
		
		//(({Mul.left=current} '*' | {Div.left=current} '/') right=Pow)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} '*' | {Div.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Pow
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Pow
		public RuleCall getRightPowParserRuleCall_1_1_0() { return cRightPowParserRuleCall_1_1_0; }
	}
	public class PowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Pow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowBaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExponentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExponentPowParserRuleCall_1_2_0 = (RuleCall)cExponentAssignment_1_2.eContents().get(0);
		
		//Pow returns Expression:
		//    Unary ({Pow.base=current} '^' exponent=Pow)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary ({Pow.base=current} '^' exponent=Pow)?
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//({Pow.base=current} '^' exponent=Pow)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Pow.base=current}
		public Action getPowBaseAction_1_0() { return cPowBaseAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//exponent=Pow
		public Assignment getExponentAssignment_1_2() { return cExponentAssignment_1_2; }
		
		//Pow
		public RuleCall getExponentPowParserRuleCall_1_2_0() { return cExponentPowParserRuleCall_1_2_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNegativeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Unary returns Expression:
		//    ({Negative} '-' operand=Unary) | Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//({Negative} '-' operand=Unary) | Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({Negative} '-' operand=Unary)
		public Group getGroup_0() { return cGroup_0; }
		
		//{Negative}
		public Action getNegativeAction_0_0() { return cNegativeAction_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//operand=Unary
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//Unary
		public RuleCall getOperandUnaryParserRuleCall_0_2_0() { return cOperandUnaryParserRuleCall_0_2_0; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_1() { return cPrimaryParserRuleCall_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary returns Expression:
		//    FunctionCall | Variable | NumberLiteral | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionCall | Variable | NumberLiteral | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }
		
		//'(' Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFuncAlternatives_1_0 = (Alternatives)cFuncAssignment_1.eContents().get(0);
		private final Keyword cFuncSinKeyword_1_0_0 = (Keyword)cFuncAlternatives_1_0.eContents().get(0);
		private final Keyword cFuncCosKeyword_1_0_1 = (Keyword)cFuncAlternatives_1_0.eContents().get(1);
		private final Keyword cFuncTanKeyword_1_0_2 = (Keyword)cFuncAlternatives_1_0.eContents().get(2);
		private final Keyword cFuncSqrtKeyword_1_0_3 = (Keyword)cFuncAlternatives_1_0.eContents().get(3);
		private final Keyword cFuncLogKeyword_1_0_4 = (Keyword)cFuncAlternatives_1_0.eContents().get(4);
		private final Keyword cFuncLnKeyword_1_0_5 = (Keyword)cFuncAlternatives_1_0.eContents().get(5);
		private final Keyword cFuncFracKeyword_1_0_6 = (Keyword)cFuncAlternatives_1_0.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall returns Expression:
		//    {FunctionCall}
		//    func=('sin' | 'cos' | 'tan' | 'sqrt' | 'log' | 'ln' | 'frac')
		//    '(' (args+=Expression (',' args+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall}
		//func=('sin' | 'cos' | 'tan' | 'sqrt' | 'log' | 'ln' | 'frac')
		//'(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//func=('sin' | 'cos' | 'tan' | 'sqrt' | 'log' | 'ln' | 'frac')
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//('sin' | 'cos' | 'tan' | 'sqrt' | 'log' | 'ln' | 'frac')
		public Alternatives getFuncAlternatives_1_0() { return cFuncAlternatives_1_0; }
		
		//'sin'
		public Keyword getFuncSinKeyword_1_0_0() { return cFuncSinKeyword_1_0_0; }
		
		//'cos'
		public Keyword getFuncCosKeyword_1_0_1() { return cFuncCosKeyword_1_0_1; }
		
		//'tan'
		public Keyword getFuncTanKeyword_1_0_2() { return cFuncTanKeyword_1_0_2; }
		
		//'sqrt'
		public Keyword getFuncSqrtKeyword_1_0_3() { return cFuncSqrtKeyword_1_0_3; }
		
		//'log'
		public Keyword getFuncLogKeyword_1_0_4() { return cFuncLogKeyword_1_0_4; }
		
		//'ln'
		public Keyword getFuncLnKeyword_1_0_5() { return cFuncLnKeyword_1_0_5; }
		
		//'frac'
		public Keyword getFuncFracKeyword_1_0_6() { return cFuncFracKeyword_1_0_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable returns Expression:
		//    {Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mathlang.MathLang.NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral returns Expression:
		//    {NumberLiteral} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberLiteral} value=INT
		public Group getGroup() { return cGroup; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DelimitedExprElements pDelimitedExpr;
	private final ExpressionElements pExpression;
	private final AssignmentElements pAssignment;
	private final SimpleExpressionElements pSimpleExpression;
	private final AddSubElements pAddSub;
	private final MulDivElements pMulDiv;
	private final PowElements pPow;
	private final UnaryElements pUnary;
	private final PrimaryElements pPrimary;
	private final FunctionCallElements pFunctionCall;
	private final VariableElements pVariable;
	private final NumberLiteralElements pNumberLiteral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDelimitedExpr = new DelimitedExprElements();
		this.pExpression = new ExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pAddSub = new AddSubElements();
		this.pMulDiv = new MulDivElements();
		this.pPow = new PowElements();
		this.pUnary = new UnaryElements();
		this.pPrimary = new PrimaryElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariable = new VariableElements();
		this.pNumberLiteral = new NumberLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mathlang.MathLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    expressions+=DelimitedExpr*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DelimitedExpr:
	//    '$' expr=Expression '@';
	public DelimitedExprElements getDelimitedExprAccess() {
		return pDelimitedExpr;
	}
	
	public ParserRule getDelimitedExprRule() {
		return getDelimitedExprAccess().getRule();
	}
	
	//Expression returns Expression:
	//    SimpleExpression | Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assignment returns Expression:
	//    {Assignment}
	//    left=Variable '=' right=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//SimpleExpression returns Expression:
	//    AddSub;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//AddSub returns Expression:
	//    MulDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*;
	public AddSubElements getAddSubAccess() {
		return pAddSub;
	}
	
	public ParserRule getAddSubRule() {
		return getAddSubAccess().getRule();
	}
	
	//MulDiv returns Expression:
	//    Pow (({Mul.left=current} '*' | {Div.left=current} '/') right=Pow)*;
	public MulDivElements getMulDivAccess() {
		return pMulDiv;
	}
	
	public ParserRule getMulDivRule() {
		return getMulDivAccess().getRule();
	}
	
	//Pow returns Expression:
	//    Unary ({Pow.base=current} '^' exponent=Pow)?;
	public PowElements getPowAccess() {
		return pPow;
	}
	
	public ParserRule getPowRule() {
		return getPowAccess().getRule();
	}
	
	//Unary returns Expression:
	//    ({Negative} '-' operand=Unary) | Primary;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//Primary returns Expression:
	//    FunctionCall | Variable | NumberLiteral | '(' Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//FunctionCall returns Expression:
	//    {FunctionCall}
	//    func=('sin' | 'cos' | 'tan' | 'sqrt' | 'log' | 'ln' | 'frac')
	//    '(' (args+=Expression (',' args+=Expression)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Variable returns Expression:
	//    {Variable} name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//NumberLiteral returns Expression:
	//    {NumberLiteral} value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
