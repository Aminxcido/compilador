/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mathlang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mathlang.ide.contentassist.antlr.internal.InternalMathLangParser;
import org.xtext.example.mathlang.services.MathLangGrammarAccess;

public class MathLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MathLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MathLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getAddSubAccess().getAlternatives_1_0(), "rule__AddSub__Alternatives_1_0");
			builder.put(grammarAccess.getMulDivAccess().getAlternatives_1_0(), "rule__MulDiv__Alternatives_1_0");
			builder.put(grammarAccess.getUnaryAccess().getAlternatives(), "rule__Unary__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getFunctionCallAccess().getFuncAlternatives_1_0(), "rule__FunctionCall__FuncAlternatives_1_0");
			builder.put(grammarAccess.getDelimitedExprAccess().getGroup(), "rule__DelimitedExpr__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup(), "rule__AddSub__Group__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1(), "rule__AddSub__Group_1__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1_0_0(), "rule__AddSub__Group_1_0_0__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1_0_1(), "rule__AddSub__Group_1_0_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup(), "rule__MulDiv__Group__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1(), "rule__MulDiv__Group_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_0(), "rule__MulDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_1(), "rule__MulDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getPowAccess().getGroup(), "rule__Pow__Group__0");
			builder.put(grammarAccess.getPowAccess().getGroup_1(), "rule__Pow__Group_1__0");
			builder.put(grammarAccess.getUnaryAccess().getGroup_0(), "rule__Unary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3_1(), "rule__FunctionCall__Group_3_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
			builder.put(grammarAccess.getModelAccess().getExpressionsAssignment(), "rule__Model__ExpressionsAssignment");
			builder.put(grammarAccess.getDelimitedExprAccess().getExprAssignment_1(), "rule__DelimitedExpr__ExprAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getLeftAssignment_1(), "rule__Assignment__LeftAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getRightAssignment_3(), "rule__Assignment__RightAssignment_3");
			builder.put(grammarAccess.getAddSubAccess().getRightAssignment_1_1(), "rule__AddSub__RightAssignment_1_1");
			builder.put(grammarAccess.getMulDivAccess().getRightAssignment_1_1(), "rule__MulDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getPowAccess().getExponentAssignment_1_2(), "rule__Pow__ExponentAssignment_1_2");
			builder.put(grammarAccess.getUnaryAccess().getOperandAssignment_0_2(), "rule__Unary__OperandAssignment_0_2");
			builder.put(grammarAccess.getFunctionCallAccess().getFuncAssignment_1(), "rule__FunctionCall__FuncAssignment_1");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0(), "rule__FunctionCall__ArgsAssignment_3_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1(), "rule__FunctionCall__ArgsAssignment_3_1_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment_1(), "rule__NumberLiteral__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MathLangGrammarAccess grammarAccess;

	@Override
	protected InternalMathLangParser createParser() {
		InternalMathLangParser result = new InternalMathLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MathLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MathLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
