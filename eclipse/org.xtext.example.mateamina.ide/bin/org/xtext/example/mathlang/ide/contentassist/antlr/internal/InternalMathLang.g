/*
 * generated by Xtext 2.38.0
 */
grammar InternalMathLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mathlang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mathlang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mathlang.services.MathLangGrammarAccess;

}
@parser::members {
	private MathLangGrammarAccess grammarAccess;

	public void setGrammarAccess(MathLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getExpressionsAssignment()); }
		(rule__Model__ExpressionsAssignment)*
		{ after(grammarAccess.getModelAccess().getExpressionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelimitedExpr
entryRuleDelimitedExpr
:
{ before(grammarAccess.getDelimitedExprRule()); }
	 ruleDelimitedExpr
{ after(grammarAccess.getDelimitedExprRule()); } 
	 EOF 
;

// Rule DelimitedExpr
ruleDelimitedExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDelimitedExprAccess().getGroup()); }
		(rule__DelimitedExpr__Group__0)
		{ after(grammarAccess.getDelimitedExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getAddSubParserRuleCall()); }
		ruleAddSub
		{ after(grammarAccess.getSimpleExpressionAccess().getAddSubParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddSub
entryRuleAddSub
:
{ before(grammarAccess.getAddSubRule()); }
	 ruleAddSub
{ after(grammarAccess.getAddSubRule()); } 
	 EOF 
;

// Rule AddSub
ruleAddSub 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddSubAccess().getGroup()); }
		(rule__AddSub__Group__0)
		{ after(grammarAccess.getAddSubAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulDiv
entryRuleMulDiv
:
{ before(grammarAccess.getMulDivRule()); }
	 ruleMulDiv
{ after(grammarAccess.getMulDivRule()); } 
	 EOF 
;

// Rule MulDiv
ruleMulDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulDivAccess().getGroup()); }
		(rule__MulDiv__Group__0)
		{ after(grammarAccess.getMulDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePow
entryRulePow
:
{ before(grammarAccess.getPowRule()); }
	 rulePow
{ after(grammarAccess.getPowRule()); } 
	 EOF 
;

// Rule Pow
rulePow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowAccess().getGroup()); }
		(rule__Pow__Group__0)
		{ after(grammarAccess.getPowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnary
entryRuleUnary
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryAccess().getAlternatives()); }
		(rule__Unary__Alternatives)
		{ after(grammarAccess.getUnaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getGroup()); }
		(rule__NumberLiteral__Group__0)
		{ after(grammarAccess.getNumberLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_1()); }
		ruleAssignment
		{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddSubAccess().getGroup_1_0_0()); }
		(rule__AddSub__Group_1_0_0__0)
		{ after(grammarAccess.getAddSubAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddSubAccess().getGroup_1_0_1()); }
		(rule__AddSub__Group_1_0_1__0)
		{ after(grammarAccess.getAddSubAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivAccess().getGroup_1_0_0()); }
		(rule__MulDiv__Group_1_0_0__0)
		{ after(grammarAccess.getMulDivAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulDivAccess().getGroup_1_0_1()); }
		(rule__MulDiv__Group_1_0_1__0)
		{ after(grammarAccess.getMulDivAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getGroup_0()); }
		(rule__Unary__Group_0__0)
		{ after(grammarAccess.getUnaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1()); }
		rulePrimary
		{ after(grammarAccess.getUnaryAccess().getPrimaryParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getFunctionCallParserRuleCall_0()); }
		ruleFunctionCall
		{ after(grammarAccess.getPrimaryAccess().getFunctionCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVariableParserRuleCall_1()); }
		ruleVariable
		{ after(grammarAccess.getPrimaryAccess().getVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
		(rule__Primary__Group_3__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncSinKeyword_1_0_0()); }
		'sin'
		{ after(grammarAccess.getFunctionCallAccess().getFuncSinKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncCosKeyword_1_0_1()); }
		'cos'
		{ after(grammarAccess.getFunctionCallAccess().getFuncCosKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncTanKeyword_1_0_2()); }
		'tan'
		{ after(grammarAccess.getFunctionCallAccess().getFuncTanKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncSqrtKeyword_1_0_3()); }
		'sqrt'
		{ after(grammarAccess.getFunctionCallAccess().getFuncSqrtKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncLogKeyword_1_0_4()); }
		'log'
		{ after(grammarAccess.getFunctionCallAccess().getFuncLogKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncLnKeyword_1_0_5()); }
		'ln'
		{ after(grammarAccess.getFunctionCallAccess().getFuncLnKeyword_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncFracKeyword_1_0_6()); }
		'frac'
		{ after(grammarAccess.getFunctionCallAccess().getFuncFracKeyword_1_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DelimitedExpr__Group__0__Impl
	rule__DelimitedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelimitedExprAccess().getDollarSignKeyword_0()); }
	'$'
	{ after(grammarAccess.getDelimitedExprAccess().getDollarSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DelimitedExpr__Group__1__Impl
	rule__DelimitedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelimitedExprAccess().getExprAssignment_1()); }
	(rule__DelimitedExpr__ExprAssignment_1)
	{ after(grammarAccess.getDelimitedExprAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DelimitedExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelimitedExprAccess().getCommercialAtKeyword_2()); }
	'@'
	{ after(grammarAccess.getDelimitedExprAccess().getCommercialAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
	()
	{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getLeftAssignment_1()); }
	(rule__Assignment__LeftAssignment_1)
	{ after(grammarAccess.getAssignmentAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getRightAssignment_3()); }
	(rule__Assignment__RightAssignment_3)
	{ after(grammarAccess.getAssignmentAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddSub__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group__0__Impl
	rule__AddSub__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getMulDivParserRuleCall_0()); }
	ruleMulDiv
	{ after(grammarAccess.getAddSubAccess().getMulDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getGroup_1()); }
	(rule__AddSub__Group_1__0)*
	{ after(grammarAccess.getAddSubAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddSub__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1__0__Impl
	rule__AddSub__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getAlternatives_1_0()); }
	(rule__AddSub__Alternatives_1_0)
	{ after(grammarAccess.getAddSubAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getRightAssignment_1_1()); }
	(rule__AddSub__RightAssignment_1_1)
	{ after(grammarAccess.getAddSubAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddSub__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1_0_0__0__Impl
	rule__AddSub__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAddSubAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getAddSubAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddSub__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1_0_1__0__Impl
	rule__AddSub__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getAddSubAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddSub__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddSubAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getAddSubAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group__0__Impl
	rule__MulDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getPowParserRuleCall_0()); }
	rulePow
	{ after(grammarAccess.getMulDivAccess().getPowParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getGroup_1()); }
	(rule__MulDiv__Group_1__0)*
	{ after(grammarAccess.getMulDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1__0__Impl
	rule__MulDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getAlternatives_1_0()); }
	(rule__MulDiv__Alternatives_1_0)
	{ after(grammarAccess.getMulDivAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getRightAssignment_1_1()); }
	(rule__MulDiv__RightAssignment_1_1)
	{ after(grammarAccess.getMulDivAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0_0__0__Impl
	rule__MulDiv__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0_1__0__Impl
	rule__MulDiv__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getDivLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getMulDivAccess().getDivLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getSolidusKeyword_1_0_1_1()); }
	'/'
	{ after(grammarAccess.getMulDivAccess().getSolidusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pow__Group__0__Impl
	rule__Pow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowAccess().getUnaryParserRuleCall_0()); }
	ruleUnary
	{ after(grammarAccess.getPowAccess().getUnaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pow__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowAccess().getGroup_1()); }
	(rule__Pow__Group_1__0)?
	{ after(grammarAccess.getPowAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pow__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pow__Group_1__0__Impl
	rule__Pow__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowAccess().getPowBaseAction_1_0()); }
	()
	{ after(grammarAccess.getPowAccess().getPowBaseAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pow__Group_1__1__Impl
	rule__Pow__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getPowAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pow__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowAccess().getExponentAssignment_1_2()); }
	(rule__Pow__ExponentAssignment_1_2)
	{ after(grammarAccess.getPowAccess().getExponentAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__0__Impl
	rule__Unary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getNegativeAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryAccess().getNegativeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__1__Impl
	rule__Unary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getHyphenMinusKeyword_0_1()); }
	'-'
	{ after(grammarAccess.getUnaryAccess().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryAccess().getOperandAssignment_0_2()); }
	(rule__Unary__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
	()
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
	(rule__FunctionCall__FuncAssignment_1)
	{ after(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)?
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
	(rule__FunctionCall__ArgsAssignment_3_0)
	{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
	(rule__FunctionCall__Group_3_1__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3_1__0__Impl
	rule__FunctionCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
	(rule__FunctionCall__ArgsAssignment_3_1_1)
	{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getVariableAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__0__Impl
	rule__NumberLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0()); }
	()
	{ after(grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
	(rule__NumberLiteral__ValueAssignment_1)
	{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ExpressionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getExpressionsDelimitedExprParserRuleCall_0()); }
		ruleDelimitedExpr
		{ after(grammarAccess.getModelAccess().getExpressionsDelimitedExprParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DelimitedExpr__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDelimitedExprAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getDelimitedExprAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getLeftVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getAssignmentAccess().getLeftVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSub__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddSubAccess().getRightMulDivParserRuleCall_1_1_0()); }
		ruleMulDiv
		{ after(grammarAccess.getAddSubAccess().getRightMulDivParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivAccess().getRightPowParserRuleCall_1_1_0()); }
		rulePow
		{ after(grammarAccess.getMulDivAccess().getRightPowParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pow__ExponentAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowAccess().getExponentPowParserRuleCall_1_2_0()); }
		rulePow
		{ after(grammarAccess.getPowAccess().getExponentPowParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryAccess().getOperandUnaryParserRuleCall_0_2_0()); }
		ruleUnary
		{ after(grammarAccess.getUnaryAccess().getOperandUnaryParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncAlternatives_1_0()); }
		(rule__FunctionCall__FuncAlternatives_1_0)
		{ after(grammarAccess.getFunctionCallAccess().getFuncAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
